#!/bin/bash

########################
#     color table      #
#======================#
# black:         00;30 #
# dark-grey:     00;31 #
# blue:          00;34 #
# light-blue:    01;34 #
# green:         00;32 #
# light-green:   01;32 #
# cyan:          00;36 #
# light-cyan:    01;36 #
# red:           00;31 #
# light-red:     01;31 #
# purple:        00;35 #
# light-purple:  01;35 #
# brown:         00;33 #
# yellow:        01;33 #
# light-grey:    00;37 #
# white:         01;37 #
########################
TAB='       '


TSBOTISRUNNING='\e[01;33m%-25s\e[01;32m(âœ“)\e[00m'
TSBOTISNOTRUNNING='\e[01;33m%-25s\e[00;31m(x)\e[00m'
TSBOTSNOTFOUND='%-25s\e[01;34mnot found.\e[00m'

LSBOTISRUNNING='\e[01;33m%-40s\e[01;32m(running)\e[00m'
LSBOTISNOTRUNNING='\e[01;33m%-40s\e[00;31m(not running)\e[00m'
LSBOTSNOTFOUNDMSG='Can not find these bots:'
LSBOTSNOTFOUND='%-30s\e[01;34m%s\e[00m'

# echos script location
function getLocation {
	local SOURCE
	local DIR
	SOURCE="${BASH_SOURCE[0]}"
	while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	  SOURCE="$(readlink "$SOURCE")"
	  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	echo $DIR
}

# parsing the bots.list file
function parseAllBots {
	local line
	local files
	local names
	local pids
	local oifs
	local data
	files=()
	names=()
	pids=()
	oifs=$IFS
	IFS=':'
	while read line
	do
		data=($line)
		if [[ ${#data[@]} -eq 3 ]]
		then
			files+=(${data[0]})
			names+=(${data[1]})
			pids+=(${data[2]})
		fi
	done <$DIR/bots.list
	IFS=$oifs
	BOTFILES=(${files[@]})
	BOTNAMES=(${names[@]})
	BOTPIDS=(${pids[@]})
}

# parses the bots.list for specific bots, param 1 = string to look
function parseBot {
	local rows
	local oifs
	local data
	rows=(`cat $DIR/bots.list | grep -iP "(/$1\\.php\\:|\\:$1\\:)"`)
	if [[ ${#rows[@]} -eq 1 ]]
	then
		oifs=$IFS
		IFS=':'
		data=(${rows[0]})
		BOTFILES+=(${data[0]})
		BOTNAMES+=(${data[1]})
		BOTPIDS+=(${data[2]})
		IFS=$oifs
	else
		BOTNOTFOUND+=($1)
	fi
}

#parse bots from bots.list
function parseBots {
	local bot
	if [[ $PALL -eq 1 ]]
	then
		parseAllBots
	else
		for bot in ${PBOT[@]}
		do
			parseBot $bot
		done
	fi
}

# check if param is parameter or shall be handled as bot
function isParam {
	if [[ `expr index "$1" -` = "1" ]]
	then
		return 1
	else
		return 0
	fi
}

# parses the params
function parseParams {
	local params
	local bots
	local p
	local c
	if [[ $# -eq 0 ]]
	then
		PACTION="status"
		PLONG=0
		PALL=1
	else
		c=0
		for p in "$@"
		do
			c=`expr $c + 1`
			isParam "$p"
			if [[ $? -eq 1 ]]
			then
				case $p in
				"--list"|"-ls")
					PACTION="list"
					POACTION=$p
				;;
				"--status"|"-s")
					PACTION="status"
					POACTION=$p
				;;
				"--start"|"-o")
					PACTION="start"
					POACTION=$p
				;;
				"--stop"|"-c")
					PACTION="stop"
					POACTION=$p
				;;
				"--restart"|"-r")
					PACTION="restart"
					POACTION=$p
				;;
				"--update"|"-u")
					PUDATE="update"
					POACTION=$p
				;;
				"--long"|"-l")
					PLONG=1
				;;
				"--all"|"-a")
					PALL=1
				;;
				"-la"|"-al")
					PALL=1
					PLONG=1
				;;
				*)
					PACTION=$p
					PVALID=0
					break;
				;;
				esac
			else
				bots=(${@:$c})
				break
			fi
		done
		if [[ -z $PACTION ]]
		then
			PACTION="status"
		fi
		if [[ ${#bots[@]} -eq 0 ]]
		then
			PALL=1
		else
			PBOT=(${bots[@]})
		fi
	fi
}

#check if a bot is running (checks pid for php -f main.php -- <cfg file>), param 1 = index of bot in global array
function isRunning {
	local tmp
	tmp=${BOTFILES[$1]//./'\.'}
	if [[ -z `ps -e --context | grep -iP "${BOTPIDS[$i]}+\\s+[a-z]+\\s+php\\s+\\-f\\s+main\\.php\\s+\\-{2,2}\\s+$tmp"` ]]
	then
		return 0
	else
		return 1
	fi
}


# global vars, dont mess with them!
#script location
DIR=`getLocation`
#config files of the bots
BOTFILES=()
#character names of the bots
BOTNAMES=()
#pids of the bots inner process, 0 if not running
BOTPIDS=()
#bots that werent found
BOTNOTFOUND=()
#valid parameter
PVALID=1
#the task input
POACTION=""
#the task
PACTION=""
#long output
PLONG=0
#all bots
PALL=0
#bot list
PBOT=()
parseParams $@

if [[ $PVALID -eq 1 ]]
then
	parseBots
	case $PACTION in
	"status")
		for i in ${!BOTNAMES[*]}
		do
			isRunning $i
			if [[ $? -eq 1 ]]
			then
				if [[ $PLONG -eq 1 ]]
				then
					printf "$TAB$LSBOTISRUNNING\n" "${BOTFILES[$i]}:${BOTNAMES[$i]}"
				else
					printf "$TAB$TSBOTISRUNNING\n" ${BOTNAMES[$i]}
				fi
			else
				if [[ $PLONG -eq 1 ]]
				then
					printf "$TAB$LSBOTISNOTRUNNING\n" "${BOTFILES[$i]}:${BOTNAMES[$i]}"
				else
					printf "$TAB$TSBOTISNOTRUNNING\n" ${BOTNAMES[$i]}
				fi
			fi
		done
	;;
	*)
		echo "parameter '$POACTION' not implemented"
	esac
	if [[ ${#BOTNOTFOUND[*]} -gt 0 ]]
	then
		if [[ $PLONG -eq 1 ]]
		then
			printf "\n${TAB}$LSBOTSNOTFOUND\n" "$LSBOTSNOTFOUNDMSG" "${BOTNOTFOUND[@]}"
		else
			printf "${TAB}$TSBOTSNOTFOUND\n" "${BOTNOTFOUND[@]}"
		fi
	fi
else
	echo "invalid paramenter '$PACTION'"
fi
